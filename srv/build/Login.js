
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
import { S as SvelteComponentDev, i as init, A as safe_not_equal, d as dispatch_dev, v as validate_slots, G as onMount, B as onDestroy, s as space, e as element, H as svg_element, t as text, b as attr_dev, c as add_location, f as insert_dev, g as append_dev, I as listen_dev, F as noop, l as detach_dev } from './vendor.js';
import { n as navbarVisible } from './main2.js';

/* svelte\routes\Login.svelte generated by Svelte v3.38.2 */
const file = "svelte\\routes\\Login.svelte";

function create_fragment(ctx) {
	let t0;
	let main;
	let a0;
	let svg;
	let path;
	let t1;
	let section0;
	let fieldset;
	let legend;
	let t3;
	let div0;
	let label0;
	let t5;
	let input0;
	let t6;
	let div1;
	let label1;
	let t8;
	let input1;
	let input1_type_value;
	let t9;
	let input2;
	let t10;
	let label2;
	let t12;
	let button;
	let t14;
	let a1;
	let t16;
	let p;
	let t17;
	let a2;
	let t19;
	let section1;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			t0 = space();
			main = element("main");
			a0 = element("a");
			svg = svg_element("svg");
			path = svg_element("path");
			t1 = space();
			section0 = element("section");
			fieldset = element("fieldset");
			legend = element("legend");
			legend.textContent = "Login";
			t3 = space();
			div0 = element("div");
			label0 = element("label");
			label0.textContent = "Username";
			t5 = space();
			input0 = element("input");
			t6 = space();
			div1 = element("div");
			label1 = element("label");
			label1.textContent = "Password";
			t8 = space();
			input1 = element("input");
			t9 = space();
			input2 = element("input");
			t10 = space();
			label2 = element("label");
			label2.textContent = "Show password";
			t12 = space();
			button = element("button");
			button.textContent = "Submit";
			t14 = space();
			a1 = element("a");
			a1.textContent = "Forgot password?";
			t16 = space();
			p = element("p");
			t17 = text("Don't have an account?\r\n\t\t\t");
			a2 = element("a");
			a2.textContent = "Sign up";
			t19 = space();
			section1 = element("section");
			document.title = "Login";
			attr_dev(path, "stroke-linecap", "round");
			attr_dev(path, "stroke-width", "1.5");
			attr_dev(path, "d", "m0 0 9,9 M0 9 9,0");
			add_location(path, file, 23, 3, 465);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "viewBox", "-1 -1 11 11");
			add_location(svg, file, 22, 2, 398);
			attr_dev(a0, "href", "/");
			attr_dev(a0, "id", "close");
			attr_dev(a0, "aria-label", "Close");
			attr_dev(a0, "class", "svelte-1q3cvh4");
			add_location(a0, file, 21, 1, 352);
			attr_dev(legend, "class", "svelte-1q3cvh4");
			add_location(legend, file, 28, 3, 596);
			attr_dev(label0, "for", "username");
			attr_dev(label0, "class", "svelte-1q3cvh4");
			add_location(label0, file, 30, 4, 634);
			attr_dev(input0, "type", "text");
			attr_dev(input0, "id", "username");
			attr_dev(input0, "name", "username");
			attr_dev(input0, "class", "svelte-1q3cvh4");
			add_location(input0, file, 31, 4, 678);
			attr_dev(div0, "class", "svelte-1q3cvh4");
			add_location(div0, file, 29, 3, 623);
			attr_dev(label1, "for", "password");
			attr_dev(label1, "class", "svelte-1q3cvh4");
			add_location(label1, file, 34, 4, 754);
			attr_dev(input1, "type", input1_type_value = /*showPassword*/ ctx[0] ? "text" : "password");
			attr_dev(input1, "id", "password");
			attr_dev(input1, "name", "password");
			attr_dev(input1, "class", "svelte-1q3cvh4");
			add_location(input1, file, 35, 4, 798);
			attr_dev(input2, "type", "checkbox");
			attr_dev(input2, "id", "show-password");
			attr_dev(input2, "name", "show-password");
			attr_dev(input2, "class", "svelte-1q3cvh4");
			add_location(input2, file, 36, 4, 883);
			attr_dev(label2, "class", "inline svelte-1q3cvh4");
			attr_dev(label2, "for", "show-password");
			add_location(label2, file, 37, 4, 980);
			attr_dev(div1, "class", "svelte-1q3cvh4");
			add_location(div1, file, 33, 3, 743);
			attr_dev(button, "class", "svelte-1q3cvh4");
			add_location(button, file, 39, 3, 1059);
			attr_dev(a1, "href", "/");
			attr_dev(a1, "class", "svelte-1q3cvh4");
			add_location(a1, file, 42, 3, 1098);
			attr_dev(fieldset, "class", "svelte-1q3cvh4");
			add_location(fieldset, file, 27, 2, 581);
			attr_dev(a2, "href", "/");
			attr_dev(a2, "class", "svelte-1q3cvh4");
			add_location(a2, file, 46, 3, 1184);
			attr_dev(p, "class", "svelte-1q3cvh4");
			add_location(p, file, 44, 2, 1149);
			attr_dev(section0, "id", "login");
			attr_dev(section0, "class", "svelte-1q3cvh4");
			add_location(section0, file, 26, 1, 557);
			attr_dev(section1, "id", "background");
			attr_dev(section1, "class", "svelte-1q3cvh4");
			add_location(section1, file, 49, 1, 1231);
			attr_dev(main, "class", "svelte-1q3cvh4");
			add_location(main, file, 20, 0, 343);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, main, anchor);
			append_dev(main, a0);
			append_dev(a0, svg);
			append_dev(svg, path);
			append_dev(main, t1);
			append_dev(main, section0);
			append_dev(section0, fieldset);
			append_dev(fieldset, legend);
			append_dev(fieldset, t3);
			append_dev(fieldset, div0);
			append_dev(div0, label0);
			append_dev(div0, t5);
			append_dev(div0, input0);
			append_dev(fieldset, t6);
			append_dev(fieldset, div1);
			append_dev(div1, label1);
			append_dev(div1, t8);
			append_dev(div1, input1);
			append_dev(div1, t9);
			append_dev(div1, input2);
			input2.checked = /*showPassword*/ ctx[0];
			append_dev(div1, t10);
			append_dev(div1, label2);
			append_dev(fieldset, t12);
			append_dev(fieldset, button);
			append_dev(fieldset, t14);
			append_dev(fieldset, a1);
			append_dev(section0, t16);
			append_dev(section0, p);
			append_dev(p, t17);
			append_dev(p, a2);
			append_dev(main, t19);
			append_dev(main, section1);

			if (!mounted) {
				dispose = listen_dev(input2, "change", /*input2_change_handler*/ ctx[1]);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*showPassword*/ 1 && input1_type_value !== (input1_type_value = /*showPassword*/ ctx[0] ? "text" : "password")) {
				attr_dev(input1, "type", input1_type_value);
			}

			if (dirty & /*showPassword*/ 1) {
				input2.checked = /*showPassword*/ ctx[0];
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(main);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Login", slots, []);
	let showPassword = false;

	onMount(() => {
		navbarVisible.update(_ => false);
	});

	onDestroy(() => {
		navbarVisible.update(_ => true);
	});

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Login> was created with unknown prop '${key}'`);
	});

	function input2_change_handler() {
		showPassword = this.checked;
		$$invalidate(0, showPassword);
	}

	$$self.$capture_state = () => ({
		onDestroy,
		onMount,
		navbarVisible,
		showPassword
	});

	$$self.$inject_state = $$props => {
		if ("showPassword" in $$props) $$invalidate(0, showPassword = $$props.showPassword);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [showPassword, input2_change_handler];
}

class Login extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Login",
			options,
			id: create_fragment.name
		});
	}
}

export default Login;
//# sourceMappingURL=Login.js.map
